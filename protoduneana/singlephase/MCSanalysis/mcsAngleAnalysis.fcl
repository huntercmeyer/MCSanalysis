#include "services_dune.fcl"
#include "services_refactored_pdune.fcl"
#include "trackproducerfrompfparticle.fcl"

process_name: MCSAngleAnalysis

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "MCSAngleAnalysis_hist.root" }
  #MemoryTracker:     {}
  #TimeTracker:       {}
  RandomNumberGenerator: {}
  #FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::protodune_services
}

source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

  analyzers:
  {
    mcsAngleAnalysis: {

	module_type:	"MCSAngleAnalysis"
    	TrackModuleLabel: "pandoraTrack"
	ShouldCreateVirtualPoints: true

	angleCalculator: {
		segmentCalculator: {
			segmentLength: 14.0
		}
	}
    }	
  }

  #define the producer and filter modules for this path, order matters, 
  #filters reject all following items.  see lines starting physics.producers below
  ana:  [
  	mcsAngleAnalysis
	]

  #end_paths is a keyword and contains the paths that do not modify the art::Event, 
  #ie analyzers and output streams.  these all run simultaneously
  end_paths:     [ana]  
}

### Here, we overwrite ALL module Labels with the ones defined above.

services.BackTrackerService.BackTracker.SimChannelModuleLabel: "tpcrawdecoder:simpleSC"
